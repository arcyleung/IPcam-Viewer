/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ipcamspackage;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import static java.lang.reflect.Modifier.FINAL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JComponent;
import javax.swing.JPanel;

/**
 *
 * @author pspkazy
 */
public class ViewerFrame extends javax.swing.JFrame {

    BufferedImage dummy;
    int curcam = 0;
    final int NUMCAMS = 4;
    String ipaddr[] = new String[NUMCAMS];
    String user[] = new String[NUMCAMS];
    String pwd[] = new String[NUMCAMS];
    String feedurl[] = new String[NUMCAMS];

    /**
     * Creates new form ViewerFeed
     */
    public ViewerFrame() {
        initComponents();
        File blankimg = new File("resources/dummy.jpg");
        File config = new File("config.cfg");

        try {
            dummy = ImageIO.read(blankimg);
            FileReader fr = new FileReader(config);
            BufferedReader br = new BufferedReader(fr);

            for (int x = 0; x < 4; x++) {
                ipaddr[x] = br.readLine();
                user[x] = br.readLine();
                pwd[x] = br.readLine();
                feedurl[x] = br.readLine();
            }

            for (int y = 0; y < NUMCAMS; y++) {
                ViewPort vp = new ViewPort();
                tabs.addTab("Camera " + (1 + y), vp);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        settingspanel.setVisible(false);

        hostname.setText(ipaddr[0]);
        username.setText(user[0]);
        password.setText(pwd[0]);
        urlext.setText(feedurl[0]);

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingspanel = new javax.swing.JPanel();
        save = new javax.swing.JButton();
        password = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        hostname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        urlext = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        settingscam = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        ptz = new javax.swing.JLabel();
        controlpanel = new javax.swing.JPanel();
        right = new javax.swing.JButton();
        up = new javax.swing.JButton();
        left = new javax.swing.JButton();
        down = new javax.swing.JButton();
        iplabel = new javax.swing.JLabel();
        devlabel = new javax.swing.JLabel();
        disconnectbtn = new javax.swing.JButton();
        connectbtn = new javax.swing.JButton();
        tabs = new javax.swing.JTabbedPane();
        irbtn = new javax.swing.JToggleButton();
        settingstoggle = new javax.swing.JToggleButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        settingspanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        password.setText("password");
        password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordFocusLost(evt);
            }
        });
        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });

        jLabel3.setText("Pass:");

        jLabel2.setText("User:");

        username.setText("admin");
        username.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                usernameFocusLost(evt);
            }
        });
        username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameActionPerformed(evt);
            }
        });

        hostname.setText("xxx.xxx.xxx.xxx");
        hostname.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                hostnameFocusLost(evt);
            }
        });
        hostname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostnameActionPerformed(evt);
            }
        });

        jLabel4.setText("Host:");

        urlext.setText("jTextField1");

        jLabel1.setText("Address URL:");

        settingscam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Camera 1", "Camera 2", "Camera 3", "Camera 4" }));
        settingscam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                settingscamItemStateChanged(evt);
            }
        });

        jLabel5.setText("Settings");

        javax.swing.GroupLayout settingspanelLayout = new javax.swing.GroupLayout(settingspanel);
        settingspanel.setLayout(settingspanelLayout);
        settingspanelLayout.setHorizontalGroup(
            settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingspanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingspanelLayout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addGroup(settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(save, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(settingspanelLayout.createSequentialGroup()
                                .addGroup(settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(password)
                                    .addComponent(hostname)
                                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(settingspanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(settingscam, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(urlext, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        settingspanelLayout.setVerticalGroup(
            settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingspanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingspanelLayout.createSequentialGroup()
                        .addGap(0, 14, Short.MAX_VALUE)
                        .addComponent(settingscam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(urlext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(save)
                .addGap(20, 20, 20))
        );

        getContentPane().add(settingspanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 630, 220));

        ptz.setText("PTZ");
        getContentPane().add(ptz, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 12, -1, -1));

        controlpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        right.setText("R");
        right.setBorder(null);
        right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightActionPerformed(evt);
            }
        });
        controlpanel.add(right, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 40, 40));

        up.setText("UP");
        up.setBorder(null);
        up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upActionPerformed(evt);
            }
        });
        controlpanel.add(up, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 60, 30));

        left.setText("L");
        left.setBorder(null);
        left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftActionPerformed(evt);
            }
        });
        controlpanel.add(left, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 40, 40));

        down.setText("DN");
        down.setBorder(null);
        down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downActionPerformed(evt);
            }
        });
        controlpanel.add(down, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 60, 30));

        getContentPane().add(controlpanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 120, 120));

        iplabel.setText("IP: --.--.--.--");
        getContentPane().add(iplabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 120, -1));

        devlabel.setText("Dev: null");
        getContentPane().add(devlabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 120, -1));

        disconnectbtn.setText("DC");
        disconnectbtn.setBorder(null);
        disconnectbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectbtnActionPerformed(evt);
            }
        });
        getContentPane().add(disconnectbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 40, 30));

        connectbtn.setText("Connect");
        connectbtn.setBorder(null);
        connectbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectbtnActionPerformed(evt);
            }
        });
        getContentPane().add(connectbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 120, 40));

        tabs.setPreferredSize(new java.awt.Dimension(640, 480));
        tabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsStateChanged(evt);
            }
        });
        getContentPane().add(tabs, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        irbtn.setText("IR");
        irbtn.setBorder(null);
        irbtn.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                irbtnPropertyChange(evt);
            }
        });
        getContentPane().add(irbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 50, 30));

        settingstoggle.setText("Settings");
        settingstoggle.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                settingstoggleStateChanged(evt);
            }
        });
        settingstoggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingstoggleActionPerformed(evt);
            }
        });
        getContentPane().add(settingstoggle, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 450, 90, 30));

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void upActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upActionPerformed
        switch (curcam) {
            case 1:
                cgicontrol(ipaddr[0], 0, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 2:
                cgicontrol(ipaddr[1], 0, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 3:
                cgicontrol(ipaddr[2], 0, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 4:
                cgicontrol(ipaddr[3], 0, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
        }
    }//GEN-LAST:event_upActionPerformed

    private void leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftActionPerformed
        switch (curcam) {
            case 1:
                cgicontrol(ipaddr[0], 1, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 2:
                cgicontrol(ipaddr[1], 1, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 3:
                cgicontrol(ipaddr[2], 1, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 4:
                cgicontrol(ipaddr[3], 1, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
        }
    }//GEN-LAST:event_leftActionPerformed

    private void rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightActionPerformed
        switch (curcam) {
            case 1:
                cgicontrol(ipaddr[0], 2, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 2:
                cgicontrol(ipaddr[1], 2, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 3:
                cgicontrol(ipaddr[2], 2, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 4:
                cgicontrol(ipaddr[3], 2, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
        }
    }//GEN-LAST:event_rightActionPerformed

    private void downActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downActionPerformed
        switch (curcam) {
            case 1:
                cgicontrol(ipaddr[0], 3, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 2:
                cgicontrol(ipaddr[1], 3, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 3:
                cgicontrol(ipaddr[2], 3, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
            case 4:
                cgicontrol(ipaddr[3], 3, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "GET");
                break;
        }
    }//GEN-LAST:event_downActionPerformed

    private void connectbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectbtnActionPerformed
        initialize();
        doPlayStream();
    }//GEN-LAST:event_connectbtnActionPerformed

    private void disconnectbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectbtnActionPerformed
        for (int i = 0; i < NUMCAMS; i++) {
            ((ViewPort) tabs.getComponentAt(i)).strm.stop();
            ((ViewPort) tabs.getComponentAt(i)).setRunning(false);
            ((ViewPort) tabs.getComponentAt(i)).setbuffimg(dummy);
            ((ViewPort) tabs.getComponentAt(i)).repaint();
            ((ViewPort) tabs.getComponentAt(i)).revalidate();
            ((ViewPort) tabs.getComponentAt(i)).setBackground(Color.black);
        }
    }//GEN-LAST:event_disconnectbtnActionPerformed

    private void irbtnPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_irbtnPropertyChange
        if (irbtn.isSelected()) {
            switch (curcam) {
                case 1:
                    cgicontrol(ipaddr[0], 4, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "POST");
                    break;
                case 2:
                    cgicontrol(ipaddr[1], 4, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "POST");
                    break;
                case 3:
                    cgicontrol(ipaddr[2], 4, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "POST");
                    break;
                case 4:
                    cgicontrol(ipaddr[3], 4, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "POST");
                    break;
            }
        } else {
            switch (curcam) {
                case 1:
                    cgicontrol(ipaddr[0], 5, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "POST");
                    break;
                case 2:
                    cgicontrol(ipaddr[1], 5, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "POST");
                    break;
                case 3:
                    cgicontrol(ipaddr[2], 5, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "POST");
                    break;
                case 4:
                    cgicontrol(ipaddr[3], 5, user[tabs.getSelectedIndex()], pwd[tabs.getSelectedIndex()], "POST");
                    break;
            }
        }
    }//GEN-LAST:event_irbtnPropertyChange

    private void tabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabsStateChanged
        curcam = tabs.getSelectedIndex() + 1;
    }//GEN-LAST:event_tabsStateChanged

    private void settingstoggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingstoggleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_settingstoggleActionPerformed

    private void settingscamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_settingscamItemStateChanged
        hostname.setText(ipaddr[settingscam.getSelectedIndex()]);
        username.setText(user[settingscam.getSelectedIndex()]);
        password.setText(pwd[settingscam.getSelectedIndex()]);
    }//GEN-LAST:event_settingscamItemStateChanged

    private void hostnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostnameActionPerformed
        hostname.setText("");
    }//GEN-LAST:event_hostnameActionPerformed

    private void hostnameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hostnameFocusLost
        ipaddr[settingscam.getSelectedIndex()] = hostname.getText();
    }//GEN-LAST:event_hostnameFocusLost

    private void usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameActionPerformed
        username.setText("");
    }//GEN-LAST:event_usernameActionPerformed

    private void usernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameFocusLost
        user[settingscam.getSelectedIndex()] = username.getText();
    }//GEN-LAST:event_usernameFocusLost

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        password.setText("");
    }//GEN-LAST:event_passwordActionPerformed

    private void passwordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFocusLost
        pwd[settingscam.getSelectedIndex()] = String.valueOf(password.getPassword());
    }//GEN-LAST:event_passwordFocusLost

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try {
            File config = new File("config.cfg");
            FileWriter fw = new FileWriter(config);
            BufferedWriter bw = new BufferedWriter(fw);

            for (int x = 0; x < NUMCAMS; x++) {
                bw.write(ipaddr[x]);
                bw.newLine();
                bw.write(user[x]);
                bw.newLine();
                bw.write(pwd[x]);
                bw.newLine();
                bw.write(feedurl[x]);
                bw.newLine();
            }

            bw.close();
            fw.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveActionPerformed

    private void settingstoggleStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_settingstoggleStateChanged
        if (settingstoggle.isSelected()) {
            settingspanel.setVisible(true);
        } else {
            settingspanel.setVisible(false);
        }
    }//GEN-LAST:event_settingstoggleStateChanged

    public void initialize() {
        ViewPort cnt = (ViewPort) tabs.getComponentAt(1);
        System.out.println("http://" + ipaddr[1] + feedurl[1]);
        for (int i = 0; i < NUMCAMS; i++) {
            ViewPort pt = (ViewPort) tabs.getComponentAt(i);
            try {
                URL connection = new URL("http://" + ipaddr[i] + feedurl[i]);
                pt.prepare(pt, connection, user[i], pwd[i]);
                pt.setRunning(true);
                tabs.setComponentAt(i, pt);
            } catch (IOException ex) {
                Logger.getLogger(ViewerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void cgicontrol(String ipaddr, int func, String username, String password, String request) {
        try {
            String data = "";
            String params = "";

            switch (func) {
                case 0:
                    data = "/pantiltcontrol.cgi?PanSingleMoveDegree=3&TiltSingleMoveDegree=1&PanTiltSingleMove=1";
                    break;
                case 1:
                    data = "/pantiltcontrol.cgi?PanSingleMoveDegree=3&TiltSingleMoveDegree=1&PanTiltSingleMove=3";
                    break;
                case 2:
                    data = "/pantiltcontrol.cgi?PanSingleMoveDegree=3&TiltSingleMoveDegree=1&PanTiltSingleMove=5";
                    break;
                case 3:
                    data = "/pantiltcontrol.cgi?PanSingleMoveDegree=3&TiltSingleMoveDegree=1&PanTiltSingleMove=7";
                    break;
                case 4:
                    data = "/nightmodecontrol.cgi";
                    params = "IRLed=1";
                    break;
                case 5:
                    data = "/nightmodecontrol.cgi";
                    params = "IRLed=0";
                    break;

            }
            URL control;
            String userpass;
            String basicAuth;
            InputStream urlStream;
            URLConnection urlConn;

            switch (request) {
                case "POST":
                    control = new URL("http://" + ipaddr + data);
                    userpass = username + ":" + password;
                    basicAuth = "Basic " + javax.xml.bind.DatatypeConverter.printBase64Binary(userpass.getBytes());
                    urlConn = control.openConnection();
                    urlConn.setRequestProperty("Authorization", basicAuth);
                    urlConn.setDoOutput(true);
                    OutputStreamWriter writer = new OutputStreamWriter(urlConn.getOutputStream());
                    writer.write(params);
                    writer.flush();
                    writer.close();
                    break;
                case "GET":
                    control = new URL("http://" + ipaddr + data);
                    userpass = username + ":" + password;
                    basicAuth = "Basic " + javax.xml.bind.DatatypeConverter.printBase64Binary(userpass.getBytes());

                    urlConn = control.openConnection();
                    urlConn.setRequestProperty("Authorization", basicAuth);
                    urlConn.setReadTimeout(2000);
                    urlConn.connect();
                    urlStream = urlConn.getInputStream();
//                    System.out.println("triggered @ dir " + func);
                    break;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void doPlayStream() {
        for (int i = 0; i < NUMCAMS; i++) {
            ((ViewPort) tabs.getComponentAt(i)).startthread();
        }
        //viewport_4.startthread();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton connectbtn;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JPanel controlpanel;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JLabel devlabel;
    private javax.swing.JButton disconnectbtn;
    private javax.swing.JButton down;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextField hostname;
    private javax.swing.JLabel iplabel;
    private javax.swing.JToggleButton irbtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton left;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JPasswordField password;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JLabel ptz;
    private javax.swing.JButton right;
    private javax.swing.JButton save;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JComboBox settingscam;
    private javax.swing.JPanel settingspanel;
    private javax.swing.JToggleButton settingstoggle;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JButton up;
    private javax.swing.JTextField urlext;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

}
